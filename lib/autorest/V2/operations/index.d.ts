/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Datasets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Datasets {


    /**
     * @summary Returns the datasets
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDataset>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDataset>>;

    /**
     * @summary Returns the datasets
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDataset} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDataset} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDataset} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDataset>;
    getDatasets(callback: ServiceCallback<models.ODataResponseListDataset>): void;
    getDatasets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDataset>): void;


    /**
     * @summary Post a new entity to datasets
     *
     * @param {object} dataset Create dataset parameters
     *
     * @param {string} [dataset.id] The dataset id
     *
     * @param {string} dataset.name The dataset name
     *
     * @param {string} [dataset.defaultRetentionPolicy] The dataset default data
     * retention policy
     *
     * @param {boolean} [dataset.addRowsAPIEnabled] Is Push Dataset
     *
     * @param {array} dataset.tables The dataset tables
     *
     * @param {string} [dataset.webUrl] The dataset web url
     *
     * @param {array} [dataset.datasources] The datasources associated with this
     * dataset
     *
     * @param {string} [dataset.defaultMode] The dataset mode or type. Possible
     * values include: 'AsAzure', 'AsOnPrem', 'Push', 'Streaming', 'PushStreaming'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postDatasetWithHttpOperationResponse(dataset: models.Dataset, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Post a new entity to datasets
     *
     * @param {object} dataset Create dataset parameters
     *
     * @param {string} [dataset.id] The dataset id
     *
     * @param {string} dataset.name The dataset name
     *
     * @param {string} [dataset.defaultRetentionPolicy] The dataset default data
     * retention policy
     *
     * @param {boolean} [dataset.addRowsAPIEnabled] Is Push Dataset
     *
     * @param {array} dataset.tables The dataset tables
     *
     * @param {string} [dataset.webUrl] The dataset web url
     *
     * @param {array} [dataset.datasources] The datasources associated with this
     * dataset
     *
     * @param {string} [dataset.defaultMode] The dataset mode or type. Possible
     * values include: 'AsAzure', 'AsOnPrem', 'Push', 'Streaming', 'PushStreaming'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postDataset(dataset: models.Dataset, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    postDataset(dataset: models.Dataset, callback: ServiceCallback<any>): void;
    postDataset(dataset: models.Dataset, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Posts new data rows into the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postRowsWithHttpOperationResponse(datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Posts new data rows into the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postRows(datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    postRows(datasetKey: string, tableName: string, requestMessage: any, callback: ServiceCallback<any>): void;
    postRows(datasetKey: string, tableName: string, requestMessage: any, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes all rows from the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRowsWithHttpOperationResponse(datasetKey: string, tableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes all rows from the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRows(datasetKey: string, tableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteRows(datasetKey: string, tableName: string, callback: ServiceCallback<any>): void;
    deleteRows(datasetKey: string, tableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets all tables within the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTablesWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListTable>>;

    /**
     * @summary Gets all tables within the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListTable} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTables(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListTable>;
    getTables(datasetKey: string, callback: ServiceCallback<models.ODataResponseListTable>): void;
    getTables(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListTable>): void;


    /**
     * @summary Updates a schema and metadata for the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putTableWithHttpOperationResponse(datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates a schema and metadata for the specified table
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putTable(datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    putTable(datasetKey: string, tableName: string, requestMessage: any, callback: ServiceCallback<any>): void;
    putTable(datasetKey: string, tableName: string, requestMessage: any, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets the dataset metadata for the specifeid dataset id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Dataset>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasetByIdWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Dataset>>;

    /**
     * @summary Gets the dataset metadata for the specifeid dataset id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Dataset} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Dataset} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Dataset} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasetById(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Dataset>;
    getDatasetById(datasetKey: string, callback: ServiceCallback<models.Dataset>): void;
    getDatasetById(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Dataset>): void;


    /**
     * @summary Deletes the dataset with the specified id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDatasetByIdWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the dataset with the specified id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDatasetById(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteDatasetById(datasetKey: string, callback: ServiceCallback<any>): void;
    deleteDatasetById(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets the dataset refresh history
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListRefresh>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRefreshHistoryWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListRefresh>>;

    /**
     * @summary Gets the dataset refresh history
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListRefresh} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListRefresh} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListRefresh} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRefreshHistory(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListRefresh>;
    getRefreshHistory(datasetKey: string, callback: ServiceCallback<models.ODataResponseListRefresh>): void;
    getRefreshHistory(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListRefresh>): void;


    /**
     * @summary Start a dataset refresh
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshDatasetWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Start a dataset refresh
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshDataset(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    refreshDataset(datasetKey: string, callback: ServiceCallback<any>): void;
    refreshDataset(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets a list of bound gateway datasources for the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListGatewayDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGatewayDatasourcesWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListGatewayDatasource>>;

    /**
     * @summary Gets a list of bound gateway datasources for the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListGatewayDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListGatewayDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListGatewayDatasource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGatewayDatasources(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListGatewayDatasource>;
    getGatewayDatasources(datasetKey: string, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;
    getGatewayDatasources(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;


    /**
     * @summary Gets a list of datasource for the specified dataset
     *
     * @param {string} datasetKey
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourcesWithHttpOperationResponse(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDatasource>>;

    /**
     * @summary Gets a list of datasource for the specified dataset
     *
     * @param {string} datasetKey
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDatasource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasources(datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDatasource>;
    getDatasources(datasetKey: string, callback: ServiceCallback<models.ODataResponseListDatasource>): void;
    getDatasources(datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDatasource>): void;


    /**
     * @summary Sets all connections for the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} parameters The body
     *
     * @param {string} [parameters.connectionString] A dataset connection string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setAllDatasetConnectionsWithHttpOperationResponse(datasetKey: string, parameters: models.ConnectionDetails, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Sets all connections for the specified dataset
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} parameters The body
     *
     * @param {string} [parameters.connectionString] A dataset connection string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setAllDatasetConnections(datasetKey: string, parameters: models.ConnectionDetails, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    setAllDatasetConnections(datasetKey: string, parameters: models.ConnectionDetails, callback: ServiceCallback<any>): void;
    setAllDatasetConnections(datasetKey: string, parameters: models.ConnectionDetails, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Bind dataset to gateway
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} bindToGatewayRequest The bind to gateway request
     *
     * @param {string} [bindToGatewayRequest.gatewayObjectId] The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    bindToGatewayWithHttpOperationResponse(datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Bind dataset to gateway
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} bindToGatewayRequest The bind to gateway request
     *
     * @param {string} [bindToGatewayRequest.gatewayObjectId] The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    bindToGateway(datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    bindToGateway(datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, callback: ServiceCallback<any>): void;
    bindToGateway(datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Returns the datasets
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDataset>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasetsInGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDataset>>;

    /**
     * @summary Returns the datasets
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDataset} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDataset} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDataset} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasetsInGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDataset>;
    getDatasetsInGroup(groupId: string, callback: ServiceCallback<models.ODataResponseListDataset>): void;
    getDatasetsInGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDataset>): void;


    /**
     * @summary Post a new entity to datasets
     *
     * @param {string} groupId The group id
     *
     * @param {object} dataset Create dataset parameters
     *
     * @param {string} [dataset.id] The dataset id
     *
     * @param {string} dataset.name The dataset name
     *
     * @param {string} [dataset.defaultRetentionPolicy] The dataset default data
     * retention policy
     *
     * @param {boolean} [dataset.addRowsAPIEnabled] Is Push Dataset
     *
     * @param {array} dataset.tables The dataset tables
     *
     * @param {string} [dataset.webUrl] The dataset web url
     *
     * @param {array} [dataset.datasources] The datasources associated with this
     * dataset
     *
     * @param {string} [dataset.defaultMode] The dataset mode or type. Possible
     * values include: 'AsAzure', 'AsOnPrem', 'Push', 'Streaming', 'PushStreaming'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postDatasetInGroupWithHttpOperationResponse(groupId: string, dataset: models.Dataset, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Post a new entity to datasets
     *
     * @param {string} groupId The group id
     *
     * @param {object} dataset Create dataset parameters
     *
     * @param {string} [dataset.id] The dataset id
     *
     * @param {string} dataset.name The dataset name
     *
     * @param {string} [dataset.defaultRetentionPolicy] The dataset default data
     * retention policy
     *
     * @param {boolean} [dataset.addRowsAPIEnabled] Is Push Dataset
     *
     * @param {array} dataset.tables The dataset tables
     *
     * @param {string} [dataset.webUrl] The dataset web url
     *
     * @param {array} [dataset.datasources] The datasources associated with this
     * dataset
     *
     * @param {string} [dataset.defaultMode] The dataset mode or type. Possible
     * values include: 'AsAzure', 'AsOnPrem', 'Push', 'Streaming', 'PushStreaming'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postDatasetInGroup(groupId: string, dataset: models.Dataset, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    postDatasetInGroup(groupId: string, dataset: models.Dataset, callback: ServiceCallback<any>): void;
    postDatasetInGroup(groupId: string, dataset: models.Dataset, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Posts new data rows into the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postRowsInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Posts new data rows into the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postRowsInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    postRowsInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, callback: ServiceCallback<any>): void;
    postRowsInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Deletes all rows from the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRowsInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, tableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes all rows from the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRowsInGroup(groupId: string, datasetKey: string, tableName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteRowsInGroup(groupId: string, datasetKey: string, tableName: string, callback: ServiceCallback<any>): void;
    deleteRowsInGroup(groupId: string, datasetKey: string, tableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets all tables within the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListTable>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTablesInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListTable>>;

    /**
     * @summary Gets all tables within the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListTable} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListTable} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListTable} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTablesInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListTable>;
    getTablesInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<models.ODataResponseListTable>): void;
    getTablesInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListTable>): void;


    /**
     * @summary Updates a schema and metadata for the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putTableInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates a schema and metadata for the specified table
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {string} tableName The table name
     *
     * @param {object} requestMessage The request message
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putTableInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    putTableInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, callback: ServiceCallback<any>): void;
    putTableInGroup(groupId: string, datasetKey: string, tableName: string, requestMessage: any, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets the dataset metadata for the specifeid dataset id
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Dataset>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasetByIdInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Dataset>>;

    /**
     * @summary Gets the dataset metadata for the specifeid dataset id
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Dataset} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Dataset} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Dataset} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasetByIdInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Dataset>;
    getDatasetByIdInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<models.Dataset>): void;
    getDatasetByIdInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Dataset>): void;


    /**
     * @summary Deletes the dataset with the specified id
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDatasetByIdInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the dataset with the specified id
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDatasetByIdInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteDatasetByIdInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<any>): void;
    deleteDatasetByIdInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets the dataset refresh history
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListRefresh>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRefreshHistoryInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListRefresh>>;

    /**
     * @summary Gets the dataset refresh history
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListRefresh} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListRefresh} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListRefresh} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRefreshHistoryInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListRefresh>;
    getRefreshHistoryInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<models.ODataResponseListRefresh>): void;
    getRefreshHistoryInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListRefresh>): void;


    /**
     * @summary Start a dataset refresh
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshDatasetInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Start a dataset refresh
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshDatasetInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    refreshDatasetInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<any>): void;
    refreshDatasetInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets a list of bound gateway datasources for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListGatewayDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGatewayDatasourcesInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListGatewayDatasource>>;

    /**
     * @summary Gets a list of bound gateway datasources for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListGatewayDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListGatewayDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListGatewayDatasource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGatewayDatasourcesInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListGatewayDatasource>;
    getGatewayDatasourcesInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;
    getGatewayDatasourcesInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;


    /**
     * @summary Gets a list of datasource for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourcesInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDatasource>>;

    /**
     * @summary Gets a list of datasource for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDatasource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasourcesInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDatasource>;
    getDatasourcesInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<models.ODataResponseListDatasource>): void;
    getDatasourcesInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDatasource>): void;


    /**
     * @summary Sets all connections for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} parameters The body
     *
     * @param {string} [parameters.connectionString] A dataset connection string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setAllDatasetConnectionsInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, parameters: models.ConnectionDetails, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Sets all connections for the specified dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} parameters The body
     *
     * @param {string} [parameters.connectionString] A dataset connection string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setAllDatasetConnectionsInGroup(groupId: string, datasetKey: string, parameters: models.ConnectionDetails, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    setAllDatasetConnectionsInGroup(groupId: string, datasetKey: string, parameters: models.ConnectionDetails, callback: ServiceCallback<any>): void;
    setAllDatasetConnectionsInGroup(groupId: string, datasetKey: string, parameters: models.ConnectionDetails, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Bind dataset to gateway
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} bindToGatewayRequest The bind to gateway request
     *
     * @param {string} [bindToGatewayRequest.gatewayObjectId] The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    bindToGatewayInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Bind dataset to gateway
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} bindToGatewayRequest The bind to gateway request
     *
     * @param {string} [bindToGatewayRequest.gatewayObjectId] The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    bindToGatewayInGroup(groupId: string, datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    bindToGatewayInGroup(groupId: string, datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, callback: ServiceCallback<any>): void;
    bindToGatewayInGroup(groupId: string, datasetKey: string, bindToGatewayRequest: models.BindToGatewayRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Take Over a dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    takeOverInGroupWithHttpOperationResponse(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Take Over a dataset
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetKey The dataset id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    takeOverInGroup(groupId: string, datasetKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    takeOverInGroup(groupId: string, datasetKey: string, callback: ServiceCallback<any>): void;
    takeOverInGroup(groupId: string, datasetKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Gateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Gateways {


    /**
     * @summary Returns a list of gateways
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGatewaysWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListGateway>>;

    /**
     * @summary Returns a list of gateways
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListGateway} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGateways(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListGateway>;
    getGateways(callback: ServiceCallback<models.ODataResponseListGateway>): void;
    getGateways(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListGateway>): void;


    /**
     * @summary Returns the specified gateway
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Gateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGatewayByIdWithHttpOperationResponse(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Gateway>>;

    /**
     * @summary Returns the specified gateway
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Gateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Gateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Gateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGatewayById(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Gateway>;
    getGatewayById(gatewayId: string, callback: ServiceCallback<models.Gateway>): void;
    getGatewayById(gatewayId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Gateway>): void;


    /**
     * @summary Get all datasources of specific gateway
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListGatewayDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourcesWithHttpOperationResponse(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListGatewayDatasource>>;

    /**
     * @summary Get all datasources of specific gateway
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListGatewayDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListGatewayDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListGatewayDatasource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasources(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListGatewayDatasource>;
    getDatasources(gatewayId: string, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;
    getDatasources(gatewayId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListGatewayDatasource>): void;


    /**
     * @summary Create a datasource
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} datasourceToGatewayRequest The datasource requested to
     * create
     *
     * @param {string} [datasourceToGatewayRequest.dataSourceType] The datasource
     * type
     *
     * @param {string} [datasourceToGatewayRequest.connectionDetails] The
     * connection details
     *
     * @param {object} [datasourceToGatewayRequest.credentialDetails]
     *
     * @param {string} [datasourceToGatewayRequest.credentialDetails.credentials]
     * The credentials
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.credentialType] The connection
     * type
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.encryptedConnection] The
     * encrypted connection
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.encryptionAlgorithm] The
     * encryption algorithm
     *
     * @param {string} [datasourceToGatewayRequest.credentialDetails.privacyLevel]
     * The privacy level
     *
     * @param {string} [datasourceToGatewayRequest.dataSourceName] The datasource
     * name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDatasourceWithHttpOperationResponse(gatewayId: string, datasourceToGatewayRequest: models.PublishDatasourceToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Create a datasource
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {object} datasourceToGatewayRequest The datasource requested to
     * create
     *
     * @param {string} [datasourceToGatewayRequest.dataSourceType] The datasource
     * type
     *
     * @param {string} [datasourceToGatewayRequest.connectionDetails] The
     * connection details
     *
     * @param {object} [datasourceToGatewayRequest.credentialDetails]
     *
     * @param {string} [datasourceToGatewayRequest.credentialDetails.credentials]
     * The credentials
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.credentialType] The connection
     * type
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.encryptedConnection] The
     * encrypted connection
     *
     * @param {string}
     * [datasourceToGatewayRequest.credentialDetails.encryptionAlgorithm] The
     * encryption algorithm
     *
     * @param {string} [datasourceToGatewayRequest.credentialDetails.privacyLevel]
     * The privacy level
     *
     * @param {string} [datasourceToGatewayRequest.dataSourceName] The datasource
     * name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDatasource(gatewayId: string, datasourceToGatewayRequest: models.PublishDatasourceToGatewayRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createDatasource(gatewayId: string, datasourceToGatewayRequest: models.PublishDatasourceToGatewayRequest, callback: ServiceCallback<any>): void;
    createDatasource(gatewayId: string, datasourceToGatewayRequest: models.PublishDatasourceToGatewayRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get a datasource by id
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayDatasource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourceByIdWithHttpOperationResponse(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayDatasource>>;

    /**
     * @summary Get a datasource by id
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayDatasource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayDatasource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayDatasource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasourceById(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayDatasource>;
    getDatasourceById(gatewayId: string, datasourceId: string, callback: ServiceCallback<models.GatewayDatasource>): void;
    getDatasourceById(gatewayId: string, datasourceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayDatasource>): void;


    /**
     * @summary Delete a datasource
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDatasourceWithHttpOperationResponse(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete a datasource
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDatasource(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteDatasource(gatewayId: string, datasourceId: string, callback: ServiceCallback<any>): void;
    deleteDatasource(gatewayId: string, datasourceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Update a datasource credentials
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} updateDatasourceRequest The update datasource request
     *
     * @param {object} [updateDatasourceRequest.credentialDetails]
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.credentials] The
     * credentials
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.credentialType]
     * The connection type
     *
     * @param {string}
     * [updateDatasourceRequest.credentialDetails.encryptedConnection] The
     * encrypted connection
     *
     * @param {string}
     * [updateDatasourceRequest.credentialDetails.encryptionAlgorithm] The
     * encryption algorithm
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.privacyLevel] The
     * privacy level
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDatasourceWithHttpOperationResponse(gatewayId: string, datasourceId: string, updateDatasourceRequest: models.UpdateDatasourceRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Update a datasource credentials
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} updateDatasourceRequest The update datasource request
     *
     * @param {object} [updateDatasourceRequest.credentialDetails]
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.credentials] The
     * credentials
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.credentialType]
     * The connection type
     *
     * @param {string}
     * [updateDatasourceRequest.credentialDetails.encryptedConnection] The
     * encrypted connection
     *
     * @param {string}
     * [updateDatasourceRequest.credentialDetails.encryptionAlgorithm] The
     * encryption algorithm
     *
     * @param {string} [updateDatasourceRequest.credentialDetails.privacyLevel] The
     * privacy level
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDatasource(gatewayId: string, datasourceId: string, updateDatasourceRequest: models.UpdateDatasourceRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateDatasource(gatewayId: string, datasourceId: string, updateDatasourceRequest: models.UpdateDatasourceRequest, callback: ServiceCallback<any>): void;
    updateDatasource(gatewayId: string, datasourceId: string, updateDatasourceRequest: models.UpdateDatasourceRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get a datasource status by id
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourceStatusByIdWithHttpOperationResponse(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get a datasource status by id
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasourceStatusById(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getDatasourceStatusById(gatewayId: string, datasourceId: string, callback: ServiceCallback<any>): void;
    getDatasourceStatusById(gatewayId: string, datasourceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get a datasource users list
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListUserAccessRight>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDatasourceUsersWithHttpOperationResponse(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListUserAccessRight>>;

    /**
     * @summary Get a datasource users list
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListUserAccessRight} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListUserAccessRight} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListUserAccessRight} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDatasourceUsers(gatewayId: string, datasourceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListUserAccessRight>;
    getDatasourceUsers(gatewayId: string, datasourceId: string, callback: ServiceCallback<models.ODataResponseListUserAccessRight>): void;
    getDatasourceUsers(gatewayId: string, datasourceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListUserAccessRight>): void;


    /**
     * @summary Get a datasource user
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} addUserToDatasourceRequest The add user to datasource
     * request
     *
     * @param {string} [addUserToDatasourceRequest.accessRight]
     *
     * @param {string} [addUserToDatasourceRequest.emailAddress]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addDatasourceUserWithHttpOperationResponse(gatewayId: string, datasourceId: string, addUserToDatasourceRequest: models.UserAccessRight, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Get a datasource user
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {object} addUserToDatasourceRequest The add user to datasource
     * request
     *
     * @param {string} [addUserToDatasourceRequest.accessRight]
     *
     * @param {string} [addUserToDatasourceRequest.emailAddress]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addDatasourceUser(gatewayId: string, datasourceId: string, addUserToDatasourceRequest: models.UserAccessRight, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addDatasourceUser(gatewayId: string, datasourceId: string, addUserToDatasourceRequest: models.UserAccessRight, callback: ServiceCallback<any>): void;
    addDatasourceUser(gatewayId: string, datasourceId: string, addUserToDatasourceRequest: models.UserAccessRight, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Delete a datasource user
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {string} emailAdress The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDatasourceUserWithHttpOperationResponse(gatewayId: string, datasourceId: string, emailAdress: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Delete a datasource user
     *
     * @param {string} gatewayId The gateway id
     *
     * @param {string} datasourceId The datasource id
     *
     * @param {string} emailAdress The user's email address
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDatasourceUser(gatewayId: string, datasourceId: string, emailAdress: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteDatasourceUser(gatewayId: string, datasourceId: string, emailAdress: string, callback: ServiceCallback<any>): void;
    deleteDatasourceUser(gatewayId: string, datasourceId: string, emailAdress: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Imports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Imports {


    /**
     * @summary Returns a list of imports
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListImport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getImportsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListImport>>;

    /**
     * @summary Returns a list of imports
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListImport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListImport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListImport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getImports(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListImport>;
    getImports(callback: ServiceCallback<models.ODataResponseListImport>): void;
    getImports(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListImport>): void;


    /**
     * @summary Creates a new import using the specified import info
     *
     * @param {string} datasetDisplayName The display name of the dataset
     *
     * @param {object} importInfo The import to post
     *
     * @param {string} [importInfo.filePath] The file path to import
     *
     * @param {string} [importInfo.connectionType] The import connection type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.nameConflict] Determines what to do if a dataset
     * with the same name already exists. Possible values include: 'Ignore',
     * 'Abort', 'Overwrite'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postImportWithHttpOperationResponse(datasetDisplayName: string, importInfo: models.ImportInfo, options?: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportModel>>;

    /**
     * @summary Creates a new import using the specified import info
     *
     * @param {string} datasetDisplayName The display name of the dataset
     *
     * @param {object} importInfo The import to post
     *
     * @param {string} [importInfo.filePath] The file path to import
     *
     * @param {string} [importInfo.connectionType] The import connection type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.nameConflict] Determines what to do if a dataset
     * with the same name already exists. Possible values include: 'Ignore',
     * 'Abort', 'Overwrite'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postImport(datasetDisplayName: string, importInfo: models.ImportInfo, options?: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportModel>;
    postImport(datasetDisplayName: string, importInfo: models.ImportInfo, callback: ServiceCallback<models.ImportModel>): void;
    postImport(datasetDisplayName: string, importInfo: models.ImportInfo, options: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportModel>): void;


    /**
     * @summary Gets the import metadata for the specifed import id
     *
     * @param {string} importId The import id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getImportByIdWithHttpOperationResponse(importId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportModel>>;

    /**
     * @summary Gets the import metadata for the specifed import id
     *
     * @param {string} importId The import id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getImportById(importId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportModel>;
    getImportById(importId: string, callback: ServiceCallback<models.ImportModel>): void;
    getImportById(importId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportModel>): void;


    /**
     * @summary Returns a list of imports for the specified group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListImport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getImportsInGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListImport>>;

    /**
     * @summary Returns a list of imports for the specified group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListImport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListImport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListImport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getImportsInGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListImport>;
    getImportsInGroup(groupId: string, callback: ServiceCallback<models.ODataResponseListImport>): void;
    getImportsInGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListImport>): void;


    /**
     * @summary Creates a new import using the specified import info
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetDisplayName The display name of the dataset
     *
     * @param {object} importInfo The import to post
     *
     * @param {string} [importInfo.filePath] The file path to import
     *
     * @param {string} [importInfo.connectionType] The import connection type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.nameConflict] Determines what to do if a dataset
     * with the same name already exists
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postImportInGroupWithHttpOperationResponse(groupId: string, datasetDisplayName: string, importInfo: models.ImportInfo, options?: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportModel>>;

    /**
     * @summary Creates a new import using the specified import info
     *
     * @param {string} groupId The group id
     *
     * @param {string} datasetDisplayName The display name of the dataset
     *
     * @param {object} importInfo The import to post
     *
     * @param {string} [importInfo.filePath] The file path to import
     *
     * @param {string} [importInfo.connectionType] The import connection type
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.nameConflict] Determines what to do if a dataset
     * with the same name already exists
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postImportInGroup(groupId: string, datasetDisplayName: string, importInfo: models.ImportInfo, options?: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportModel>;
    postImportInGroup(groupId: string, datasetDisplayName: string, importInfo: models.ImportInfo, callback: ServiceCallback<models.ImportModel>): void;
    postImportInGroup(groupId: string, datasetDisplayName: string, importInfo: models.ImportInfo, options: { nameConflict? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportModel>): void;


    /**
     * @summary Gets the import metadata for the specifed import id
     *
     * @param {string} groupId The group id
     *
     * @param {string} importId The import id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getImportByIdInGroupWithHttpOperationResponse(groupId: string, importId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportModel>>;

    /**
     * @summary Gets the import metadata for the specifed import id
     *
     * @param {string} groupId The group id
     *
     * @param {string} importId The import id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getImportByIdInGroup(groupId: string, importId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportModel>;
    getImportByIdInGroup(groupId: string, importId: string, callback: ServiceCallback<models.ImportModel>): void;
    getImportByIdInGroup(groupId: string, importId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportModel>): void;
}

/**
 * @class
 * Reports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Reports {


    /**
     * @summary Gets a list of reports
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListReport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReportsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListReport>>;

    /**
     * @summary Gets a list of reports
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListReport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListReport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListReport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReports(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListReport>;
    getReports(callback: ServiceCallback<models.ODataResponseListReport>): void;
    getReports(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListReport>): void;


    /**
     * @summary Clones the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Clone report parameters
     *
     * @param {string} [requestParameters.name] The requested report name
     *
     * @param {string} [requestParameters.targetWorkspaceId] Optional parameter for
     * specifying the target workspace id
     *
     * @param {string} [requestParameters.targetModelId] Optional parameter for
     * specifying the target associated model (dataset) id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Report>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cloneReportWithHttpOperationResponse(reportKey: string, requestParameters: models.CloneReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Report>>;

    /**
     * @summary Clones the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Clone report parameters
     *
     * @param {string} [requestParameters.name] The requested report name
     *
     * @param {string} [requestParameters.targetWorkspaceId] Optional parameter for
     * specifying the target workspace id
     *
     * @param {string} [requestParameters.targetModelId] Optional parameter for
     * specifying the target associated model (dataset) id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Report} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Report} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Report} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cloneReport(reportKey: string, requestParameters: models.CloneReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Report>;
    cloneReport(reportKey: string, requestParameters: models.CloneReportRequest, callback: ServiceCallback<models.Report>): void;
    cloneReport(reportKey: string, requestParameters: models.CloneReportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Report>): void;


    /**
     * @summary Generate token to view or edit the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenWithHttpOperationResponse(reportKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view or edit the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateToken(reportKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateToken(reportKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateToken(reportKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Generate token to create a new report on a given dataset
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenForCreateWithHttpOperationResponse(requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to create a new report on a given dataset
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateTokenForCreate(requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateTokenForCreate(requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateTokenForCreate(requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Get the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Report>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReportWithHttpOperationResponse(reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Report>>;

    /**
     * @summary Get the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Report} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Report} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Report} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReport(reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Report>;
    getReport(reportKey: string, callback: ServiceCallback<models.Report>): void;
    getReport(reportKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Report>): void;


    /**
     * @summary Deletes the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteReportWithHttpOperationResponse(reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the specified report
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteReport(reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteReport(reportKey: string, callback: ServiceCallback<any>): void;
    deleteReport(reportKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Rebinds the specified report to requested dataset id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Rebind report parameters
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rebindReportWithHttpOperationResponse(reportKey: string, requestParameters: models.RebindReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Rebinds the specified report to requested dataset id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Rebind report parameters
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rebindReport(reportKey: string, requestParameters: models.RebindReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    rebindReport(reportKey: string, requestParameters: models.RebindReportRequest, callback: ServiceCallback<any>): void;
    rebindReport(reportKey: string, requestParameters: models.RebindReportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets a list of reports available within the specified group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListReport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReportsInGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListReport>>;

    /**
     * @summary Gets a list of reports available within the specified group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListReport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListReport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListReport} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReportsInGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListReport>;
    getReportsInGroup(groupId: string, callback: ServiceCallback<models.ODataResponseListReport>): void;
    getReportsInGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListReport>): void;


    /**
     * @summary Get the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Report>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReportInGroupWithHttpOperationResponse(groupId: string, reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Report>>;

    /**
     * @summary Get the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Report} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Report} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Report} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReportInGroup(groupId: string, reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Report>;
    getReportInGroup(groupId: string, reportKey: string, callback: ServiceCallback<models.Report>): void;
    getReportInGroup(groupId: string, reportKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Report>): void;


    /**
     * @summary Deletes the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteReportInGroupWithHttpOperationResponse(groupId: string, reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Deletes the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteReportInGroup(groupId: string, reportKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    deleteReportInGroup(groupId: string, reportKey: string, callback: ServiceCallback<any>): void;
    deleteReportInGroup(groupId: string, reportKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Clones the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Clone report parameters
     *
     * @param {string} [requestParameters.name] The requested report name
     *
     * @param {string} [requestParameters.targetWorkspaceId] Optional parameter for
     * specifying the target workspace id
     *
     * @param {string} [requestParameters.targetModelId] Optional parameter for
     * specifying the target associated model (dataset) id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Report>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cloneReportInGroupWithHttpOperationResponse(groupId: string, reportKey: string, requestParameters: models.CloneReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Report>>;

    /**
     * @summary Clones the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Clone report parameters
     *
     * @param {string} [requestParameters.name] The requested report name
     *
     * @param {string} [requestParameters.targetWorkspaceId] Optional parameter for
     * specifying the target workspace id
     *
     * @param {string} [requestParameters.targetModelId] Optional parameter for
     * specifying the target associated model (dataset) id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Report} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Report} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Report} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cloneReportInGroup(groupId: string, reportKey: string, requestParameters: models.CloneReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Report>;
    cloneReportInGroup(groupId: string, reportKey: string, requestParameters: models.CloneReportRequest, callback: ServiceCallback<models.Report>): void;
    cloneReportInGroup(groupId: string, reportKey: string, requestParameters: models.CloneReportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Report>): void;


    /**
     * @summary Generate token to view or edit the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenInGroupWithHttpOperationResponse(groupId: string, reportKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view or edit the specified report
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateTokenInGroup(groupId: string, reportKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateTokenInGroup(groupId: string, reportKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateTokenInGroup(groupId: string, reportKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Generate token to create a new report on a given dataset
     *
     * @param {string} groupId The group id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenForCreateInGroupWithHttpOperationResponse(groupId: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to create a new report on a given dataset
     *
     * @param {string} groupId The group id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateTokenForCreateInGroup(groupId: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateTokenForCreateInGroup(groupId: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateTokenForCreateInGroup(groupId: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Rebinds the specified report to requested dataset id
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Rebind report parameters
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rebindReportInGroupWithHttpOperationResponse(groupId: string, reportKey: string, requestParameters: models.RebindReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Rebinds the specified report to requested dataset id
     *
     * @param {string} groupId The group id
     *
     * @param {string} reportKey The report id
     *
     * @param {object} requestParameters Rebind report parameters
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rebindReportInGroup(groupId: string, reportKey: string, requestParameters: models.RebindReportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    rebindReportInGroup(groupId: string, reportKey: string, requestParameters: models.RebindReportRequest, callback: ServiceCallback<any>): void;
    rebindReportInGroup(groupId: string, reportKey: string, requestParameters: models.RebindReportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Dashboards
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Dashboards {


    /**
     * @summary Gets a list of dashboards
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDashboard>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDashboardsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDashboard>>;

    /**
     * @summary Gets a list of dashboards
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDashboard} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDashboard} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDashboard} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDashboards(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDashboard>;
    getDashboards(callback: ServiceCallback<models.ODataResponseListDashboard>): void;
    getDashboards(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDashboard>): void;


    /**
     * @summary Gets a list of dashboards in a group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListDashboard>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDashboardsInGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListDashboard>>;

    /**
     * @summary Gets a list of dashboards in a group
     *
     * @param {string} groupId The group id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListDashboard} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListDashboard} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListDashboard} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDashboardsInGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListDashboard>;
    getDashboardsInGroup(groupId: string, callback: ServiceCallback<models.ODataResponseListDashboard>): void;
    getDashboardsInGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListDashboard>): void;


    /**
     * @summary Get the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Dashboard>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDashboardWithHttpOperationResponse(dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Dashboard>>;

    /**
     * @summary Get the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Dashboard} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Dashboard} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Dashboard} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDashboard(dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Dashboard>;
    getDashboard(dashboardKey: string, callback: ServiceCallback<models.Dashboard>): void;
    getDashboard(dashboardKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Dashboard>): void;


    /**
     * @summary Get tiles in the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListTile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTilesWithHttpOperationResponse(dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListTile>>;

    /**
     * @summary Get tiles in the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListTile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListTile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListTile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTiles(dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListTile>;
    getTiles(dashboardKey: string, callback: ServiceCallback<models.ODataResponseListTile>): void;
    getTiles(dashboardKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListTile>): void;


    /**
     * @summary Get tiles in the specified dashboard in a group
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListTile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTilesInGroupWithHttpOperationResponse(groupId: string, dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListTile>>;

    /**
     * @summary Get tiles in the specified dashboard in a group
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListTile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListTile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListTile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTilesInGroup(groupId: string, dashboardKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListTile>;
    getTilesInGroup(groupId: string, dashboardKey: string, callback: ServiceCallback<models.ODataResponseListTile>): void;
    getTilesInGroup(groupId: string, dashboardKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListTile>): void;


    /**
     * @summary Get a specified tile in a specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Tile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTileWithHttpOperationResponse(dashboardKey: string, tileKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tile>>;

    /**
     * @summary Get a specified tile in a specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Tile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Tile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Tile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTile(dashboardKey: string, tileKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tile>;
    getTile(dashboardKey: string, tileKey: string, callback: ServiceCallback<models.Tile>): void;
    getTile(dashboardKey: string, tileKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tile>): void;


    /**
     * @summary Get a specified tile in a specified dashboard in a group
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Tile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTileInGroupWithHttpOperationResponse(groupId: string, dashboardKey: string, tileKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tile>>;

    /**
     * @summary Get a specified tile in a specified dashboard in a group
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Tile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Tile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Tile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTileInGroup(groupId: string, dashboardKey: string, tileKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tile>;
    getTileInGroup(groupId: string, dashboardKey: string, tileKey: string, callback: ServiceCallback<models.Tile>): void;
    getTileInGroup(groupId: string, dashboardKey: string, tileKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tile>): void;


    /**
     * @summary Generate token to view the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenWithHttpOperationResponse(dashboardKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view the specified dashboard
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateToken(dashboardKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateToken(dashboardKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateToken(dashboardKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Generate token to view the specified dashboard
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenInGroupWithHttpOperationResponse(groupId: string, dashboardKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view the specified dashboard
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateTokenInGroup(groupId: string, dashboardKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateTokenInGroup(groupId: string, dashboardKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateTokenInGroup(groupId: string, dashboardKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;
}

/**
 * @class
 * Tiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Tiles {


    /**
     * @summary Generate token to view the specified tile
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenWithHttpOperationResponse(dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view the specified tile
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateToken(dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateToken(dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateToken(dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;


    /**
     * @summary Generate token to view the specified tile
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmbedToken>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateTokenInGroupWithHttpOperationResponse(groupId: string, dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmbedToken>>;

    /**
     * @summary Generate token to view the specified tile
     *
     * @param {string} groupId The group id
     *
     * @param {string} dashboardKey The dashboard id
     *
     * @param {string} tileKey The tile id
     *
     * @param {object} requestParameters Generate token parameters
     *
     * @param {string} [requestParameters.accessLevel] The dataset mode or type.
     * Possible values include: 'View', 'Edit', 'Create'
     *
     * @param {string} [requestParameters.datasetId] The new dataset of the
     * rebinded report
     *
     * @param {boolean} [requestParameters.allowSaveAs] Allow SaveAs the report
     * with generated token.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmbedToken} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmbedToken} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmbedToken} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateTokenInGroup(groupId: string, dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmbedToken>;
    generateTokenInGroup(groupId: string, dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, callback: ServiceCallback<models.EmbedToken>): void;
    generateTokenInGroup(groupId: string, dashboardKey: string, tileKey: string, requestParameters: models.GenerateTokenRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmbedToken>): void;
}

/**
 * @class
 * Groups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PowerBIClient.
 */
export interface Groups {


    /**
     * @summary Returns a list of groups
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ODataResponseListGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGroupsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ODataResponseListGroup>>;

    /**
     * @summary Returns a list of groups
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ODataResponseListGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ODataResponseListGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ODataResponseListGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGroups(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ODataResponseListGroup>;
    getGroups(callback: ServiceCallback<models.ODataResponseListGroup>): void;
    getGroups(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ODataResponseListGroup>): void;
}
